# -*- coding: utf-8 -*-
import os
import re

"""Class used for describing an network interfaces file"""
class interfaces:
	"""
	autos = auto entries
	allow = allow- entries
	inter = iface entries
	mappi = mapping entries
	"""

	"""Constructor which creates an interfaces file from a filepath"""
	def __init__(self, filepath='/etc/network/interfaces'):
		self.inter = list()
		self.mappi = list()
		self.autos = list()
		self.allow = list()
		currentmode = 'n' #[m]apping, [i]face, [n]one
		with open(filepath, 'r') as filein:
			for line in filein:
				if line[0] == '#':
					continue
				line = line.lstrip()
				if line.startswith('auto'):
					self.autos.append(*line.lstrip().split()[1:])
				elif line.startswith('source'):
					print 'source not implemented yet'
				elif line.startswith('allow-'):
					items = line.split()
					allowfor = items[0].split('-')[-1]
					self.allow.append(*[(allowfor, item) for item in items[1:]])
				elif line.startswith('iface'):
					items = line.split()[1:]
					self.inter.append( (items[0], items[1], items[2], list()) )
					currentmode = 'i'
				elif line.startswith('mapping'):
					self.mappi.append(line.split()[1], list())
					currentmode = 'm'
				elif line:
					current = self.mappi[-1] if currentmode=='m' else self.inter[-1]
					current[-1].append(line.strip())

		print 'autos:'
		print self.autos
		print 'allow-'
		print self.allow
		print 'ifaces'
		print self.inter
		print 'mappings'
		print self.mappi

				

	def tofile(self, filepath='/etc/network/interfaces'):
		if os.path.isfile(filepath):
			print "file exists, backup created..."
			os.system("mv %s %s.bak" % (filepath, filepath))
		with open(filepath, "w") as fileout:
			fileout.write("# Generated by pynterfaces\n")
			fileout.writelines("auto %s\n" % i for i in self.autos)
			fileout.writelines("allow-%s %s\n" % i for i in self.allow)
			for m in self.mappi:
				fileout.write("\n")
				fileout.write("mapping %s\n" % m[0])
				fileout.writelines("\t%s\n" % o for o in i[-1])
			for i in self.inter:
				fileout.write("\n")
				fileout.write("iface %s %s %s\n" % i[:3])
				fileout.writelines("\t%s\n" % o for o in i[-1]) 

if __name__ == '__main__':
	interfaces().tofile('./test.int')
