# -*- coding: utf-8 -*-

import os
import re
import sys

"""Class used for describing an network interfaces file"""
class interfaces:
	"""
	autos = auto entries
	allow = allow- entries
	inter = iface entries
	mappi = mapping entries
	"""

	"""Constructor which creates an interfaces file from a filepath"""
	def __init__(self, filepath='/etc/network/interfaces'):
		self.inter = list()
		self.mappi = list()
		self.autos = list()
		self.allow = list()
		if filepath=="-":
			filein = sys.stdin
		else:
			filein = open(filepath, "r")
		for line in filein:
			if line[0] == '#':
				continue
			line = line.lstrip()
			if line.startswith('auto'):
				self.autos += line.lstrip().split()[1:]
			elif line.startswith('source'):
				print 'source not implemented yet'
			elif line.startswith('allow-'):
				items = line.split()
				allowfor = items[0].split('-')[-1]
				self.allow += [(allowfor, item) for item in items[1:]]
			elif line.startswith('iface'):
				items = line.split()[1:]
				self.inter.append( (items[0], items[1], items[2], list()) )
				currentmode = 'i'
			elif line.startswith('mapping'):
				self.mappi.append(line.split()[1], list())
				currentmode = 'm'
			elif line:
				current = self.mappi[-1] if currentmode=='m' else self.inter[-1]
				current[-1].append(line.strip())
		if filepath!="-":
			filein.close()
	
	def __str__(self):
		out = "autos: %s\n" % ', '.join(self.autos)
		out += "%s\n" % '\n'.join(
				'%s: %s' % (i, ', '.join(j[1] for j in self.allow if j[0]==i)) 
				for i in set(i[0] for i in self.allow))
		out += "ifaces: %s\n" % ', '.join(map(str, self.inter))
		out += "mappings: %s\n" % ', '.join(map(str, self.mappi))
		return out

	def remove(self, name, verbose=False):
		try:
			p = self.autos.pop(self.autos.index(name))
			if verbose: print 'removed auto: %s' % p
		except ValueError: pass
		try:
			p = self.mappi.pop([i[0] for i in self.mappi].index(name))
			if verbose: print 'removed mapping: %s' % str(p)
		except ValueError: pass
		try:
			p = self.inter.pop([i[0] for i in self.inter].index(name))
			if verbose: print 'removed iface: %s' % str(p)
		except ValueError: pass

	def tofile(self, filepath='/etc/network/interfaces', verbose=False):
		if filepath=="-":
			fileout = sys.stdout
		else:
			if os.path.isfile(filepath):
				if verbose: print "file exists, backup created..."
				os.system("mv %s %s.bak" % (filepath, filepath))
			fileout = open(filepath, "w")
		fileout.write("# Generated by pynterfaces\n")
		if self.autos:
			fileout.write("auto %s\n" % ' '.join(i for i in sorted(self.autos)))
		if self.allow:
			fileout.writelines("allow-%s %s\n" % i for i in sorted(self.allow))
		for m in sorted(self.mappi):
			fileout.write("\n")
			fileout.write("mapping %s\n" % m[0])
			fileout.writelines("\t%s\n" % o for o in m[-1])
		for i in sorted(self.inter):
			fileout.write("\n")
			fileout.write("iface %s %s %s\n" % i[:3])
			fileout.writelines("\t%s\n" % o for o in i[-1]) 
		if filepath!="-":
			fileout.close()
